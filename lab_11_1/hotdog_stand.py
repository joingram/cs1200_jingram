class HotdogStand():
    """
    This class models a simple hotdog stand.

    Every day the vendor comes out with a set level of inventory
    and will sell the product at a fixed price. The vendor can
    continue selling products until he/she runs out of inventory.
    After that time the vendor can restock to resume product sales.
    """

    def __init__(self, name, unit_price=3.00, unit_count=100):
        """Initialize the stand

        :param name: Provide a name for this vendor
        :param unit_price: Set product price (optional), float
        :param unit_count: Set inventory level (optional), integer
        """
        self.name = name
        self.unit_price = unit_price
        self.default_unit_count = unit_count
        self.inventory_level = 0
        self.revenue = 0
        self.restock()

    def show_name(self):
        """Returns the name of the stand"""
        return self.name

    def show_revenue(self):
        """Gets the revenue generated by this stand
        :return: float
        """
        return self.revenue
        
    def get_inventory(self):
        """Gets the current inventory level
        :return: integer
        """
        return self.inventory_level        

    def restock(self):
        """When vendor runs out of stock, call this method
        to replenish the inventory"""
        self.inventory_level = self.default_unit_count

    def sell_units(self, count):
        """
        This method handles product sales.

        If the vendor has enough remaining stock, he/she will
        return the number of hot dogs purchased, in other words
        the same value as count.

        If vendor has some units to sell, but not as many as
        the customer wants to purchase, this method will return
        the number of units that are still available for purchase.
        This return value will always be less than the provided count.

        If the vendor is completely out of stock, this method
        returns 0

        :param count: Number of hot dogs customer wants to purchase
        :return: purchasable unit count; when return value is the same
        as the supplied count argument, the sale was completed successfully.
        """

        if self.inventory_level - count >= 0:
            self.revenue += count * self.unit_price
            self.inventory_level -= count
            return count
        else:
            return self.inventory_level
